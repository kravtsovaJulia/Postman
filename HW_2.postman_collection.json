{
	"info": {
		"_postman_id": "8590ca85-96fe-4f30-868d-ac786d5e6cfa",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is string\", function () {\r",
							"  pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let jsonData  = pm.response.json();\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name_4\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"julia\");\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(JSON.stringify(23));\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.salary)).to.eql(JSON.stringify(3000));\r",
							"});\r",
							"//Спарсить request\r",
							"let rec= request.data\r",
							"//Проверить, что name в ответе равно name s request(name забрать из request.)\r",
							"let name_1 = jsonData.name\r",
							"let name_2 = rec.name\r",
							"pm.test(\"name\", function () {\r",
							"    pm.expect(name_1 ).to.eql(name_2);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_1 = jsonData.age\r",
							"let age_2 = rec.age\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(age_1).to.eql(age_2);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request(salary забрать из request.)\r",
							"let salary_4 = rec.salary\r",
							"pm.test(\"salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.salary)).to.eql(salary_4);\r",
							"});\r",
							"//Вывести в консоль параметр family из response\r",
							"let family_1 = jsonData.family\r",
							"console.log(family_1)\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4\r",
							"let salary_1_5  = jsonData.family.u_salary_1_5_year\r",
							"let salary_1_5_1 = salary_4 *4\r",
							"pm.test(\"response_4\", function () {\r",
							"    pm.expect(salary_1_5_1).to.eql(salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "julia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let jsonData_1= pm.response.json();\r",
							"//Спарсить request.\r",
							"var req_data = pm.request.url.query.toObject();\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_8 = req_data.name\r",
							"pm.test(\"u_name\", function () {\r",
							"    pm.expect(jsonData_1.name).to.eql(name_8);\r",
							"});\r",
							"//проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_6 = req_data.age\r",
							"pm.test(\"u_age\", function () {\r",
							"    pm.expect(jsonData_1.age).to.eql(age_6);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_6 = req_data.salary\r",
							"pm.test(\"u_salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_1.salary)).to.eql(salary_6);\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"let family_u = jsonData_1.family\r",
							"console.log(family_u)\r",
							"//Проверить, что у параметра dog есть параметры name и age.\r",
							"pm.test(\"dog is name\", function () {\r",
							"pm.expect(jsonData_1.family.pets.dog).to.have.key(\"name\",\"age\");\r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"let person = jsonData_1.family.pets.dog\r",
							"pm.test(\"Dog name is Luky\", function () {\r",
							"    pm.expect(person.name).to.eql(\"Luky\");\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"let person_1 = jsonData_1.family.pets.dog\r",
							"pm.test(\"Dog age is 4\", function () {\r",
							"    pm.expect(JSON.stringify(person_1.age)).to.eql(\"4\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=viktoria&age=23&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "viktoria"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let jsonData_2= pm.response.json();\r",
							"//Спарсить request.\r",
							"var req_data_1 = pm.request.url.query.toObject();\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_7= req_data_1.name\r",
							"pm.test(\"u_name\", function () {\r",
							"    pm.expect(jsonData_2.name).to.eql(name_7);\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let age_5 = req_data_1.age\r",
							"pm.test(\"age = rec.age\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_2.age)).to.eql(age_5);\r",
							"});\r",
							"// Вывести в консоль параметр salary из request.\r",
							"let salary_4 = req_data_1.salary\r",
							"console.log(salary_4)\r",
							"//Вывести в консоль параметр salary из response.\r",
							"let salary_a = jsonData_2.salary\r",
							"console.log(salary_a)\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(salary_a[0])\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary_a[1])\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary_a[2])\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary_0\", function () {\r",
							"    pm.expect(JSON.stringify(salary_a[0])).to.eql(salary_4);\r",
							"});\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let salary_6 = salary_4 *2\r",
							"pm.test(\"salary_1\", function () {\r",
							"    pm.expect((salary_a[1])).to.eql(JSON.stringify(salary_6));\r",
							"});\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let salary_7 = salary_4 *3\r",
							" pm.test(\"salary_3\", function () {\r",
							"    pm.expect((salary_a[2])).to.eql(JSON.stringify(salary_7));\r",
							"});\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"julia\");\r",
							"//Передать в окружение переменную age;\r",
							"pm.environment.set(\"age\", \"23\");\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"3000\");\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(var k in jsonData_2.salary) {\r",
							"    console.log(jsonData_2.salary[k])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name=julia&age=23&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "julia"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let jsonData_3 = pm.response.json();\r",
							"//Спарсить request.\r",
							"let rec_1= request.data\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"string start_qa_salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_3)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"string qa_salary_after_6_months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_3)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"string qa_salary_after_12_months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_3)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"string qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_3)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"string qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_3)).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"string person\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_3)).to.include(\"person\");\r",
							"});\r",
							"//Проверить, что параметр start_qa_salary  равен salary из request (salary забрать из request.)\r",
							"let qa_salary = jsonData_3.start_qa_salary\r",
							"let salary_b = rec_1.salary\r",
							"pm.test(\"qa_salary\", function () {\r",
							"    pm.expect(JSON.stringify(qa_salary)).to.eql(salary_b);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let qa_salary_6 = jsonData_3.qa_salary_after_6_months\r",
							"let salary_after = salary_b *2\r",
							"pm.test(\"qa_salary_6\", function () {\r",
							"    pm.expect(qa_salary_6).to.eql(salary_after);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let qa_salary_12 = jsonData_3.qa_salary_after_12_months\r",
							"let salary_after_1 = salary_b *2.7\r",
							"pm.test(\"qa_salary_12\", function () {\r",
							"    pm.expect(qa_salary_12).to.eql(salary_after_1);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let salary_after_2 = salary_b *3.3\r",
							"let qa_salary_1_5 = jsonData_3 ['qa_salary_after_1.5_year']\r",
							"pm.test(\"qa_salary_1_5\", function () {\r",
							"    pm.expect(qa_salary_1_5).to.eql(salary_after_2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let salary_after_3 = salary_b *3.8\r",
							"let qa_salary_3_5 = jsonData_3['qa_salary_after_3.5_years']\r",
							"pm.test(\"qa_salary_3_5\", function () {\r",
							"    pm.expect(qa_salary_3_5 ).to.eql(salary_after_3);\r",
							"});\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let salary_1_2 = rec_1.salary\r",
							"pm.test(\"salary_1_2 \", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_3.person.u_name[1])).to.eql(salary_1_2);\r",
							"});\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let age_1_2 = rec_1.age\r",
							"pm.test(\"age_1_2 \", function () {\r",
							"    pm.expect(JSON.stringify(jsonData_3.person.u_age)).to.eql(age_1_2);\r",
							"});\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let salary_5_years = salary_1_2 *4.2\r",
							"pm.test(\"salary_5_years\", function () {\r",
							"    pm.expect(jsonData_3.person.u_salary_5_years).to.eql(salary_5_years);\r",
							"});\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for(var i in jsonData_3.person) {\r",
							"    console.log(jsonData_3.person[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "age",
			"value": ""
		}
	]
}